proxies:
######### 锚点 start #######
provider: &PROVIDER { interval: 3600, health-check: { enable: true, url: 'https://www.gstatic.com/generate_204', interval: 600 } }
NODES: &NODES { type: select, proxies: [🚀 节点选择, 🔰 故障转移, 🌀 手动切换, ⛱️ 负载均衡, 🇭🇰 香港节点, 🇸🇬 新加坡节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇰🇷 韩国节点, 🏳️‍🌈 其他节点, 🔄 延迟最低, 🎯 全球直连] }
######### 锚点 end #########
proxy-providers:
  AllProxy: &AllProxy { <<: *PROVIDER, type: http, path: ./proxy/AllProxy.yaml, url: "http://127.0.0.1:25500/getprofile?name=profiles/formyairport.ini&token=password&list=true" }
  MYProxy: &MYProxy { <<: *PROVIDER, type: file, path: ./proxy/MyProxy.yaml }
proxy-groups:
  - { name: '🚀 节点选择', type: select, proxies: [🔰 故障转移, 🌀 手动切换, ⛱️ 负载均衡, 🇭🇰 香港节点, 🇸🇬 新加坡节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇰🇷 韩国节点, 🏳️‍🌈 其他节点, 🔄 延迟最低, 🎯 全球直连] }
  - { name: '🌀 手动切换', type: select, include-all-providers: true }
  - { name: '🔰 故障转移', type: fallback, include-all-providers: true }
  - { name: '📲 Telegram', <<: *NODES }
  - { name: '📹 YouTube', <<: *NODES, disable-udp: true }
  - { name: '🎥 NETFLIX', <<: *NODES }
  - { name: 'Ⓜ️ Google', <<: *NODES }
  - { name: '📹 Twitter', <<: *NODES }
  - { name: '💽 巴哈姆特', <<: *NODES }
  - { name: '🐟 漏网之鱼', <<: *NODES }
  - { name: '🏳️‍🌈 其他节点', type: select, include-all-providers: true, filter: '^(?!.*(?:🇭🇰|🇯🇵|🇺🇸|🇸🇬|🇨🇳|🇰🇷)).*' }
  - { name: '🇭🇰 香港节点', type: url-test, include-all-providers: true, tolerance: 10, filter: '^(?=.*(🇭🇰|港|虚通|(?i)HK|Hong))(?!.*(回国|校园|游戏|教育|(?i)GAME|IPV6)).*$' }
  - { name: '🇸🇬 新加坡节点', type: url-test, include-all-providers: true, tolerance: 10, filter: '^(?=.*((?i)🇸🇬|新加坡|狮|SG|Singapore))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$' }
  - { name: '🇨🇳 台湾节点', type: url-test, include-all-providers: true, tolerance: 10, filter: '^(?=.*((?i)🇹🇼|台|TW|Tai))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6|CloudBlades)).*$' }
  - { name: '🇯🇵 日本节点', type: url-test, include-all-providers: true, tolerance: 10, filter: '^(?=.*((?i)🇯🇵|日|川日|东京|大阪|泉日|埼玉|JP|Japan))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$' }
  - { name: '🇺🇲 美国节点', type: url-test, include-all-providers: true, tolerance: 10, filter: '^(?=.*((?i)🇺🇸|美|US|United States))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6|CloudBlades)).*$' }
  - { name: '🇰🇷 韩国节点', type: url-test, include-all-providers: true, tolerance: 10, filter: '^(?=.*((?i)🇰🇷|韩|韓|首尔|KR|Korea))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$' }
  - { name: '🔄 延迟最低', type: url-test, include-all-providers: true }
  - { name: '⛱️ 负载均衡', type: load-balance, include-all-providers: true, strategy: consistent-hashing, filter: "(?i)🇭🇰|港|hk|hongkong|hong kong" } # 筛选满足关键词或正则表达式的节点
  - { name: '🎯 全球直连', type: select, proxies: [DIRECT] }
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: yaml}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: yaml}
  classical: &classical {type: http, interval: 86400, behavior: classical, format: yaml}
rule-providers:
  # youtube_domain:
  #   <<: *domain
  #   url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.yaml"
rules:
  # - NOT,((DST-PORT,22/53/80/123/143/194/443/465/587/853/993/995/5222/8080/8443)),REJECT # 拦截非常用端口
  - AND,(AND,(DST-PORT,443),(NETWORK,UDP)),(GEOSITE,geolocation-!cn),REJECT # quic
  - GEOIP,lan,🎯 全球直连,no-resolve
  - GEOSITE,twitter,📹 Twitter
  - GEOSITE,youtube,📹 YouTube
  - GEOSITE,telegram,📲 Telegram
  - GEOSITE,netflix,🎥 NETFLIX
  - GEOSITE,google,Ⓜ️ Google
  - GEOSITE,bahamut,💽 巴哈姆特
  - GEOSITE,geolocation-!cn,🐟 漏网之鱼
  - GEOIP,netflix,🎥 NETFLIX
  - GEOIP,telegram,📲 Telegram
  - GEOIP,twitter,📹 Twitter
  - GEOSITE,CN,🎯 全球直连
  - GEOIP,CN,🎯 全球直连
  - MATCH,🐟 漏网之鱼
